#!/bin/bash -Eue
#
# Install the gnome-terminal custom profile and VGA font for Rogue
#
#    Copyright (C) 2015 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. See <http://www.gnu.org/licenses/gpl.html>
#
# Adapted from gnome-terminal.install at https://github.com/MestreLion/scripts
#------------------------------------------------------------------------------
# User input
force=0

#------------------------------------------------------------------------------
# Constants

# name must match profile name used by ../roguepc-gnome-terminal !
# Also it must *NOT* contain single-quotes! Spaces and double-quotes are OK
name=RoguePC
gconfdata=gnome-terminal-profile.gconf.xml

#------------------------------------------------------------------------------
# Environment

mydir=$(dirname "$(readlink -f "$0")")
version=$(gnome-terminal --version | awk '{print $4}')

usage() {
	echo "Install the gnome-terminal custom profile and VGA font for Rogue"
	echo "Optional, but makes Rogue look just like the PC-DOS version"
	echo "Usage: ${0##.*/} [-h|--help] [-f|--force]"
	exit
}

version_sort() {
	# print one argument per line sorted on version ordering
	printf "%s\n" "$@" | LC_ALL=C sort --version-sort
}

version_compare() {
	# Usage: version_compare <greater|lesser> version [versions...]
	# Return 0 if version is the greatest (or the least) of all versions,
	# non-zero otherwise
	if [[ "$1" == "greater" ]]; then
		local cmd=(tail -n1)
	else
		local cmd=(head -n1)
	fi
	shift
	if ! [[ "$(version_sort "$@" | "${cmd[@]}")" == "$1" ]]; then
		return 1
	fi
}

#------------------------------------------------------------------------------
# For gnome-terminal < 3.8 (~2013): use gconf backend
gt_gconf() {
	local pname=$1
	local pdata=$2

	local gconftool=gconftool
	local gcrootkey=/apps/gnome-terminal
	local gclistkey=$gcrootkey/global/profile_list
	local gcprofrootkey=$gcrootkey/profiles

	# Get the first profile key available
	local i=-1
	local prefix=Profile
	while "$gconftool" --dir-exists "$gcprofrootkey"/"$prefix$((++i))"; do :
	done
	local profile="${prefix}${i}"
	local profkey="$gcprofrootkey"/"$profile"

	echo "Creating Gnome Terminal profile: $profile ($pname) '${pdata##*/}'"

	# Load the new profile key
	"$gconftool" --load <(\
		sed "/^[ ]*<entrylist/s/[0-9]*\">\$/$i\">/" "$pdata") &&

	# Change the name
	"$gconftool" --type string --set "$profkey"/visible_name "$pname" &&

	# Update the profile list
	"$gconftool" --type list --list-type string --set "$gclistkey" \
		"$("$gconftool" --get "$gclistkey" | sed "s/]/,$profile]/")"
}

#------------------------------------------------------------------------------
# For gnome-terminal 3.8 onwards: use dconf / gsettings backend



gt_dconf() {
	local path='/org/gnome/terminal/legacy/profiles:/'
	local profiles= profile= puid= pname= sep=

	while IFS= read -r puid; do
		pname=$(dconf read "${path}${puid}visible-name")
		if [[ "'${name}'" != "$pname" ]]; then continue; fi
		if ((force)); then profile=$puid; break; fi
		echo >&2 "Profile '$name' already exists: ${puid:1:-1}"
		echo >&2 "Delete or rename it, or run again with --force to overwrite"
		exit 1
	done < <(dconf list "$path" | awk '/^:/{print}')
	if [[ "$profile" ]]; then
		echo "Updating Gnome Terminal profile: $name (${profile:1:-1})"
	else
		profile=":$(uuidgen)/"
		echo "Creating Gnome Terminal profile: $name (${profile:1:-1})"
		profiles=$(dconf read "${path}list")
		if [[ "${profiles: -2}" == "']" ]]; then sep=', '; fi
		dconf write "${path}list" "${profiles::-1}${sep}'${profile:1:-1}']"
	fi
	# Created with: dconf dump "${path}${profile}" | sort
	dconf load "${path}${profile}" <<-EOF
		[/]
		background-color='#000000'
		cursor-blink-mode='on'
		cursor-shape='underline'
		default-size-columns=80
		default-size-rows=25
		font='Perfect DOS VGA 437 Unicode 24'
		foreground-color='#AAAAAA'
		palette=['#000000', '#AA0000', '#00AA00', '#AA5500', '#0000AA', '#AA00AA', '#00AAAA', '#AAAAAA', '#555555', '#FF5555', '#55FF55', '#FFFF55', '#5555FF', '#FF55FF', '#55FFFF', '#FFFFFF']
		scrollbar-policy='never'
		use-system-font=false
		use-theme-colors=false
		use-theme-transparency=false
		use-transparent-background=false
		visible-name='$name'
	EOF
}

#------------------------------------------------------------------------------

for arg in "$@"; do [[ "$arg" == "-h" || "$arg" == "--help" ]] && usage ; done
while (($#)); do
	case "$1" in
	-f|--force) force=1;;
	*) printf >&2 "invalid argument: $1\nTry '${0##.*/} --help' for usage\n"; exit 1;;
	esac
	shift || break
done

if ! version_compare "greater" "$version" 3.8; then
	gt_gconf "$name" "$mydir"/"$gconfdata"
else
	gt_dconf "$name"
fi

echo "Installing custom font"
#"$mydir"/perfect-dos-unicode-font.install

echo "Done!"
echo "Use 'roguepc-gnome-terminal' launcher for the ultimate Rogue experience!"
